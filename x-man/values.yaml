# Default values for x-man.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# The images' container registry, e.g., "docker.io"
imageRegistry: ""
# The repository base path for all component images, e.g., "lath/x-man"
#
# All images are expected to be available by their service number as direct
# child under the root repository.
imageRootRepository: ""
# This sets the pull policy for all images.
imagePullPolicy: IfNotPresent
# Overrides the image tag for all images whose default is the chart appVersion.
imageTag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

timezone: Europe/Berlin

app:
  # AUTHORIZATION
  #
  # Configuration for user authorization at the application.
  #
  # Validity period of a user token. A user will stay logged in after entering
  # their username/password for the time given here.
  #
  # Mind that after a user's group memberships are changed, a valid token will
  # keep its previous permissions.
  loginTokenLifetimeDays: 365
  # ROUTINES
  #
  # Configuration for reoccurring tasks.
  #
  # Time after which to automatically delete successfully archived submission
  # processes from the application storage and database.
  deleteArchivedSubmissionsAfterDays: 31
  # Time after which processing errors that are not associated with a still
  # existing submission process are deleted.
  deleteErrorsAfterDays: 31
  # XDOMEA
  #
  # The name and abbreviation of the institution used as sender in generated
  # xdomea messages.
  institutionName: Testarchiv
  institutionAbbreviation: TESA
  # The level at which the user can make appraisal decisions.
  #
  # The option "all" is not yet fully supported for reports. 
  appraisalLevel: root # root | all
  # Maximum number of levels of records in messages that will be used to inform
  # users of valid but malformed messages.
  maxRecordDepth: 5

server:
  resources: {}
  volumes: []
  volumeMounts: []
gui:
  resources: {}
mongodb:
  # Either provide a URL to an externally managed MongoDB instance or let
  # Kubernetes setup an internal instance (default).
  #
  # -- external configuration
  url: ""
  # -- external and internal configuration
  user: mongo
  password: mongo
  database: app
  # -- internal configuration
  image: docker.io/mongo
  version: "8.0"
  resources: {}
  storageClassName: ""
  volumeClaimResources:
    requests:
      storage: 1Gi
ldap:
  # Either provide data for an externally managed LDAP or Active Directory or
  # let Kubernetes setup a simple internal LDAP server for testing purposes
  # (default).
  #
  # -- external configuration
  url: ""
  tlsInsecureSkipVerify: false
  # -- external and internal configuration
  ldapConfig: default # default | active-directory
  baseDn: "ou=people,dc=planetexpress,dc=com"
  user: "cn=admin,dc=planetexpress,dc=com"
  password: "GoodNewsEveryone"
  accessGroup: "ship_crew"
  adminGroup: "admin_staff"
  # -- internal configuration
  image: ghcr.io/rroemhild/docker-test-openldap
  version: master
  resources: {}

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
